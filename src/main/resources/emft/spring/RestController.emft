/*[- */ fileNamePattern=%sController.java /* -]*/
/*[- */ genfolder=java /* -]*/
/*[- */ subpackage=web.controller /* -]*/
/*[- */ appliesTo=Entity /* -]*/
package [(${clazz.epackage.name})].web.controller;

import java.text.SimpleDateFormat;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import java.util.stream.Collectors;
import java.text.ParseException;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import [(${clazz.epackage.name})].domain.[(${clazz.name})];
import [(${clazz.epackage.name})].web.dto.[(${clazz.name})]DTO;
import [(${clazz.epackage.name})].web.dto.[(${clazz.name})]Criteria;
import [(${clazz.epackage.name})].facade.*;
import [(${clazz.epackage.name})].web.util.PagedResult;
[# th:each="ref: ${clazz.getEReferences()}"]
import [(${clazz.epackage.name})].domain.[(${ref.eType.name})];
import [(${clazz.epackage.name})].web.dto.[(${ref.eType.name})]DTO;
[/]
[# emft:importJavaList="${clazz}" /]


@RestController
@RequestMapping("/[# emft:dashed="${clazz}"/]")
public class [(${clazz.name})]Controller {

	private static SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

	@Autowired
	private [(${clazz.name})]Facade [# emft:lcc="${clazz}"/]Facade;


	@GetMapping("/find-by-id/[# emft:restpk="${clazz}"/]")
	public [(${clazz.name})]DTO findById([# emft:pathvarpk="${clazz}"/]){
		[(${clazz.name})] [# emft:lcc="${clazz}"/] = [# emft:lcc="${clazz}"/]Facade.findById([# emft:methodpk="${clazz}"/]);
		[(${clazz.name})]DTO [# emft:lcc="${clazz}"/]DTO = [# emft:lcc="${clazz}"/]Facade.toDTO([# emft:lcc="${clazz}"/]);
		return [# emft:lcc="${clazz}"/]DTO;
	}
	
	
	@GetMapping("/delete/[# emft:restpk="${clazz}"/]")
	public void delete([# emft:pathvarpk="${clazz}"/]){
		[(${clazz.name})] [# emft:lcc="${clazz}"/] = [# emft:lcc="${clazz}"/]Facade.findById([# emft:methodpk="${clazz}"/]);
		[# emft:lcc="${clazz}"/]Facade.delete([# emft:lcc="${clazz}"/]);
	}
	
	
	@PostMapping("/insert")
	public void insert(@RequestBody [(${clazz.name})]DTO [# emft:lcc="${clazz}"/]DTO){
		[# emft:lcc="${clazz}"/]Facade.insert([# emft:lcc="${clazz}"/]DTO);
	}
	
	
	@PostMapping("/update")
	public void update(@RequestBody [(${clazz.name})]DTO [# emft:lcc="${clazz}"/]DTO){
		[# emft:lcc="${clazz}"/]Facade.update([# emft:lcc="${clazz}"/]DTO);
	}
	
	
	[# emft:hasNoAnnotation="${clazz}" source="NoSearchFilter"]
	@PostMapping("/find")
	public PagedResult<[(${clazz.name})]DTO> search(@RequestBody [(${clazz.name})]Criteria [# emft:lcc="${clazz}"/]Criteria){
		PagedResult<[(${clazz.name})]DTO> result = new PagedResult<[(${clazz.name})]DTO>([# emft:lcc="${clazz}"/]Criteria.getPageSize());
		if ([# emft:lcc="${clazz}"/]Criteria.getPage()==1) {
			Long totalRecords = [# emft:lcc="${clazz}"/]Facade.getTotalRecords([# emft:lcc="${clazz}"/]Criteria);
			result.setTotalRecords(totalRecords);
		}
		List<[(${clazz.name})]> lst = [# emft:lcc="${clazz}"/]Facade.findByCriteria([# emft:lcc="${clazz}"/]Criteria);
		result.setList(lst.stream().map(x -> [# emft:lcc="${clazz}"/]Facade.toDTO(x)).collect(Collectors.toList()));
		return result;
	}
	[/]
	[# emft:hasAnnotation="${clazz}" source="NoSearchFilter"]
	@PostMapping("/findAll")
	public List<[(${clazz.name})]DTO> findAll(){
		List<[(${clazz.name})]> lst = [# emft:lcc="${clazz}"/]Facade.findAll();
		return lst.stream().map(x -> [# emft:lcc="${clazz}"/]Facade.toDTO(x)).collect(Collectors.toList());
	}
	[/]
	
}