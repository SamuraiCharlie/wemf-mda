/*[- */ fileNamePattern=%sController.java /* -]*/
/*[- */ genfolder=java /* -]*/
/*[- */ subpackage=web.controller /* -]*/
package [(${clazz.epackage.name})].web.controller;

import java.text.SimpleDateFormat;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import java.util.stream.Collectors;
import java.text.ParseException;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import [(${clazz.epackage.name})].model.[(${clazz.name})];
import [(${clazz.epackage.name})].dto.[(${clazz.name})]DTO;
import [(${clazz.epackage.name})].dto.[(${clazz.name})]FilterDTO;
import [(${clazz.epackage.name})].facade.[(${clazz.name})]Facade;
import [(${clazz.epackage.name})].web.util.PagedResult;
[# emft:importJavaList="${clazz}" /]

@RestController
@RequestMapping("/rest/[(${#strings.toLowerCase(clazz.name)})]")
public class [(${clazz.name})]Controller {

	private static SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

	@Autowired
	[(${clazz.name})]Facade [(${#strings.toLowerCase(clazz.name)})]Facade;

	@GetMapping("/consultarPorId/{id}")
	public [(${clazz.name})]DTO getById(@PathVariable Long id){
		[(${clazz.name})] [(${#strings.toLowerCase(clazz.name)})] = [(${#strings.toLowerCase(clazz.name)})]Facade.getById(id);
		[(${clazz.name})]DTO [(${#strings.toLowerCase(clazz.name)})]DTO = toDTO([(${#strings.toLowerCase(clazz.name)})]);
		return [(${#strings.toLowerCase(clazz.name)})]DTO;
	}
	
	
	@GetMapping("/excluir/{id}")
	public void remove(@PathVariable Long id){
		[(${clazz.name})] [(${#strings.toLowerCase(clazz.name)})] = [(${#strings.toLowerCase(clazz.name)})]Facade.getById(id);
		[(${#strings.toLowerCase(clazz.name)})]Facade.remove([(${#strings.toLowerCase(clazz.name)})]);
	}
	
	
	
	@PostMapping("/atualizar")
	public void atualizar(@RequestBody [(${clazz.name})]DTO [(${#strings.toLowerCase(clazz.name)})]){
		[(${clazz.name})] modelo = [(${#strings.toLowerCase(clazz.name)})]Facade.getById([# emft:parampk="${clazz}"/]);
		atualizar(modelo, [(${#strings.toLowerCase(clazz.name)})]);
		[(${#strings.toLowerCase(clazz.name)})]Facade.update(modelo);
	}
	
	
	@GetMapping("/consultar")
	public PagedResult<[(${clazz.name})]DTO> getByFilter([(${clazz.name})]FilterDTO filter){
		PagedResult<[(${clazz.name})]DTO> result = new PagedResult<[(${clazz.name})]DTO>(filter.getPageSize());
		Long totalRecords = participanteFacade.getTotalRecords(filter);
		result.setTotalRecords(totalRecords);
		List<[(${clazz.name})]> lst = [(${#strings.toLowerCase(clazz.name)})]Facade.getByFilter(filter);
		result.setList(lst.stream().map(x -> toDTO(x)).collect(Collectors.toList()));
		return result;
	}
	
	
	private void atualizar([(${clazz.name})] [(${#strings.toLowerCase(clazz.name)})], [(${clazz.name})]DTO dto){
		[# th:each="attr : ${clazz.getEStructuralFeatures()}"]	
		[# th:if="${attr.eType.name}=='EDate'"]
		if ([(${#strings.toLowerCase(clazz.name)})].get[# emft:cc="${attr}"/]()!=null){
			try{
			[(${#strings.toLowerCase(clazz.name)})].set[# emft:cc="${attr}"/](sdf.parse(dto.get[# emft:cc="${attr}"/]()));
			}
			catch (ParseException e) {
				throw new IllegalArgumentException(String.format("Valor de data inv√°lida para o atributo '%s'.", "[(${attr.name})]"), e);
			}
		}[/]
		[# th:if="${attr.eType.name}!='EDate'"][(${#strings.toLowerCase(clazz.name)})].set[# emft:cc="${attr}"/](dto.get[# emft:cc="${attr}"/]());[/]
		[/]
	}		
	
	
	private [(${clazz.name})]DTO toDTO([(${clazz.name})] [(${#strings.toLowerCase(clazz.name)})]){
		[(${clazz.name})]DTO [(${#strings.toLowerCase(clazz.name)})]DTO = new [(${clazz.name})]DTO(); 	
		[# th:each="attr : ${clazz.getEStructuralFeatures()}"]	
		[# th:if="${attr.eType.name}=='EDate'"]
		if ([(${#strings.toLowerCase(clazz.name)})].get[# emft:cc="${attr}"/]()!=null){
			[(${#strings.toLowerCase(clazz.name)})]DTO.set[# emft:cc="${attr}"/](sdf.format([(${#strings.toLowerCase(clazz.name)})].get[# emft:cc="${attr}"/]()));
		}[/]
		[# th:if="${attr.eType.name}!='EDate'"][(${#strings.toLowerCase(clazz.name)})]DTO.set[# emft:cc="${attr}"/]([(${#strings.toLowerCase(clazz.name)})].get[# emft:cc="${attr}"/]());[/]
		[/]
		return [(${#strings.toLowerCase(clazz.name)})]DTO;
	}	
}