/*[- */ fileNamePattern=Modal%s.js /* -]*/
/*[- */ genfolder=front /* -]*/
/*[- */ subpackage=src/components/ /* -]*/
import React, {Component} from "react";
import {Container} from "flux/utils";
import [(${clazz.name})]ModalStore from "../data/[(${clazz.name})]ModalStore";
import [(${clazz.name})]Actions from "../data/[(${clazz.name})]Actions";
import Pagination from "../components/Pagination";

class Modal[(${clazz.name})] extends Component{


    updateFilter(field, value){
        [(${clazz.name})]Actions.updateFilter(field, value);
    }

    find(){
        [(${clazz.name})]Actions.searchModal(this.state.filter);
    }



    printList[(${clazz.name})](){
        if (this.state.list){
            if (this.state.list.length > 0){
                return (
                    <table className="table table-bordered table-hover">
                        <thead>
                            <tr>
                                <th>Code</th>
                                <th>Name</th>
                            </tr>
                        </thead>
                        <tbody>
                            {
                                this.state.list.map(x => this.print[(${clazz.name})](x))
                            }
                        </tbody>
                    </table>
                );
            }
            else{
                return "No records found";
            }
        }
        return null;
    }



    print[(${clazz.name})]([# emft:lcc="${clazz}"/]){
        return (
            <tr key={[# emft:lcc="${clazz}"/].id[# emft:cc="${clazz}"/]} style={{cursor: "pointer"}} onClick={() => this.props.callback([# emft:lcc="${clazz}"/])}>
                <td>{[# emft:lcc="${clazz}"/].id[# emft:cc="${clazz}"/]}</td>
                <td>{[# emft:lcc="${clazz}"/].name}</td>
            </tr>
        );
    }


	renderPagination(){
		if (this.state.list.length==0) return null;
		return (
			<div className="row">
				<Pagination id="[# emft:lcc="${clazz}" /]-search" navigate={this.navigate}/>
			</div>
		);
	}


    render(){
        return (
            <div className="modal" id={this.props.id} tabIndex="-1" role="dialog">
            <div className="modal-dialog modal-dialog-centered">
                <div className="modal-content">
                <div className="modal-header">
                    <h5 className="modal-title">Search [(${clazz.name})]</h5>
                    <button type="button" className="close" data-dismiss="modal" aria-label="Fechar">
                    <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div className="modal-body">
                    <div className="row">
                        <div className="col-md-3">
                            <label>Find</label><br/>
                        </div>
                        <div className="col-md-6">
                            <input id="find" placeholder="code or name" className="form-control" type="text" onChange={(e) => this.updateFilter('find', e.target.value)}/>
                        </div>
                        <div className="col">
                            <button type="button" className="btn btn-primary" onClick={() => this.find()}>search</button>
                        </div>
                    </div>
                    <div className="row mt-3">
                    	{this.printList[(${clazz.name})]()}
                    </div>
                </div>
                <div className="modal-footer">
                    {this.renderPagination()}
                </div>
                </div>
            </div>
            </div>

        );
    }

    static  getStores() {
	  	return [
	    	[(${clazz.name})]ModalStore
	  	];
	}


    static calculateState() {
		const nextState = [(${clazz.name})]ModalStore.getState();
	  	return {
			list : nextState.list,
            filter: nextState.filter
	  	};
	}
}

export default Container.create(Modal[(${clazz.name})]);